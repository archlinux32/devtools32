#!/bin/bash
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

m4_include(lib/common.sh)

CHROOT_VERSION='v2'

FORCE='n'
MODE='i'
NOCOPY='n'
NONETWORK='n'

working_dir=''

APPNAME=$(basename "${0}")

# usage: usage <exitvalue>
usage() {
	echo "Usage: ${APPNAME} [options] working-dir [exta-arguments]"
	echo ' options:'
	echo '    -f            Force overwrite of files in the working-dir'
	echo '    -C <file>     Location of a pacman config file'
	echo '    -M <file>     Location of a makepkg config file'
	echo '    -n            Do not copy config files into the chroot'
	echo '    -c <dir>      Set pacman cache'
	echo '    -N            Disable networking in the chroot'
	echo ' modes:'
	echo '    -i            Install the packages "extra-arguments" in the chroot.'
	echo '                  This creates the chroot if it does not exist.'
	echo '                  This is the default mode.'
	echo '    -r            Run the command "extra-arguments" within the chroot'
	echo '    -u            Update the chroot via pacman'
	echo '    -h            Print this message'

	exit ${1-1}
}

################################################################################

while getopts 'fC:M:nc:Niruh' arg; do
	case "${arg}" in
		f) FORCE='y' ;;
		C) pac_conf="$OPTARG" ;;
		M) makepkg_conf="$OPTARG" ;;
		n) NOCOPY='y' ;;
		c) cache_dir="$OPTARG" ;;
		N) NONETWORK='y' ;;

		i|r|u) MODE="$arg" ;;
		h) usage 0 ;;

		*) error "invalid argument '${arg}'"; usage ;;
	esac
done

shift $(($OPTIND - 1))

case $MODE in
	i)
		case $# in
			0) die 'You must specify a directory and one or more packages.' ;;
			1) die 'You must specify one or more packages.' ;;
		esac
		;;
	r)
		case $# in
			0) die 'You must specify a directory and a command.' ;;
			1) die 'You must specify a command.' ;;
		esac
		;;
	u)
		case $# in
			0) die 'You must specify a directory.' ;;
			1) : ;;
			2) die 'Extra arguments' ;;
		esac
		;;
esac

working_dir="$(readlink -f "${1}")"
shift 1
[[ -z $working_dir ]] && die 'Please specify a working directory.'

if [[ $MODE == u ]]; then
	MODE=r
	set -- pacman -Syu --noconfirm
fi

################################################################################

if (( $EUID != 0 )); then
	die 'This script must be run as root.'
fi

if [[ -z $cache_dir ]]; then
	cache_dirs=($(pacman -v $cache_conf 2>&1 | grep '^Cache Dirs:' | sed 's/Cache Dirs:\s*//g'))
else
	cache_dirs=(${cache_dir})
fi

host_mirror=$(pacman -Sddp extra/devtools 2>/dev/null | sed -E 's#(.*/)extra/os/.*#\1$repo/os/$arch#')
if echo "${host_mirror}" | grep -q 'file://'; then
	host_mirror_path=$(echo "${host_mirror}" | sed -E 's#file://(/.*)/\$repo/os/\$arch#\1#g')
fi

# {{{ functions
build_mount_args() {
	local p
	declare -g mount_args=()

	if [[ -n $host_mirror_path ]]; then
		printf -v p '%q' "$host_mirror_path"
		mount_args+=(--bind-ro="$p")
	fi

	printf -v p '%q' "${cache_dirs[0]}"
	mount_args+=(--bind="$p")

	for cache_dir in ${cache_dirs[@]:1}; do
		printf -v p '%q' "$cache_dir"
		mount_args+=(--bind-ro="$p")
	done
}

copy_hostconf () {
	cp -a /etc/pacman.d/gnupg "${working_dir}/etc/pacman.d"
	echo "Server = ${host_mirror}" > ${working_dir}/etc/pacman.d/mirrorlist

	if [[ -n $pac_conf && $NOCOPY = 'n' ]]; then
		cp ${pac_conf} ${working_dir}/etc/pacman.conf
	fi

	if [[ -n $makepkg_conf && $NOCOPY = 'n' ]]; then
		cp ${makepkg_conf} ${working_dir}/etc/makepkg.conf
	fi

	sed -r "s|^#?\\s*CacheDir.+|CacheDir = $(echo -n ${cache_dirs[@]})|g" -i ${working_dir}/etc/pacman.conf
}

chroot_lock () {
	lock_open_write 9 "${working_dir}" "Locking chroot"
}

chroot_run() {
	local dir=$1
	shift
	local nspawn_args=(-D "$dir" "${mount_args[@]}")
	if [[ $NONETWORK = y ]]; then
		nspawn_args+=(--private-network)
	fi
	systemd-nspawn "${nspawn_args[@]}" -- "${@}" 2>/dev/null
}

# }}}

umask 0022
if [[ $MODE == r ]]; then
	# run chroot {{{
	#Sanity check
	if [[ ! -f "${working_dir}/.arch-chroot" ]]; then
		die "'${working_dir}' does not appear to be a Arch chroot."
	elif [[ $(cat "${working_dir}/.arch-chroot") != ${CHROOT_VERSION} ]]; then
		die "'${working_dir}' is not compatible with ${APPNAME} version ${CHROOT_VERSION}. Please rebuild."
	fi

	chroot_lock
	build_mount_args
	copy_hostconf

	chroot_run "${working_dir}" "$@"

	# }}}
elif [[ $MODE == i ]]; then
	# {{{ build chroot
	if [[ -e $working_dir && $FORCE = 'n' ]]; then
		die "Working directory '${working_dir}' already exists - try using -f"
	fi

	if [[ ! -d "${working_dir}" ]]; then
		mkdir -p "${working_dir}"
	fi

	if { type -P btrfs && btrfs subvolume create "${working_dir}"; } &>/dev/null; then
		chmod 0755 "${working_dir}"
	fi

	chroot_lock

	pacargs=("${cache_dirs[@]/#/--cachedir=}")
	if [[ -n $pac_conf ]]; then
		pacargs+=("--config=${pac_conf}")
	fi

	if [[ $FORCE = 'y' ]]; then
		pacargs+=("--force")
	fi
	if ! pacstrap -GMcd "${working_dir}" "${pacargs[@]}" "$@"; then
		die 'Failed to install all packages'
	fi

	printf '%s.UTF-8 UTF-8\n' en_US de_DE > "${working_dir}/etc/locale.gen"
	chroot_run "${working_dir}" locale-gen
	echo 'LANG=C' > "${working_dir}/etc/locale.conf"

	copy_hostconf

	echo "${CHROOT_VERSION}" > "${working_dir}/.arch-chroot"
	# }}}
fi
